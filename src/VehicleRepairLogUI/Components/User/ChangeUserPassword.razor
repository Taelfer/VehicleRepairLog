@inject IUserService userService
@inject NavigationManager navigationManager

<h1>Change Password</h1>
<hr />

<div class="card col-3">
    <div class="card-body">
        <EditForm Model="PasswordChangeRequest">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="NewPassword">New Password</label>
                <InputText id="NewPassword" type="password" class="form-control" @bind-Value="PasswordChangeRequest.NewPassword" />
                <ValidationMessage For="@(() => PasswordChangeRequest.NewPassword)" />
            </div>
            <div class="form-group">
                <label for="ConfirmPassword">Confirm Password</label>
                <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="PasswordChangeRequest.ConfirmPassword" />
                <ValidationMessage For="@(() => PasswordChangeRequest.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-success" @onclick="OnConfirm">Save changes</button>
            <button type="button" class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public PasswordChangeRequestDto PasswordChangeRequest { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    // Stores the User Authentication State data.
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Gets the current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to homepage.
            navigationManager.NavigateTo("/login", true);
        }
    }
}
