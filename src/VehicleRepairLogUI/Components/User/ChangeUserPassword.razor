@inject IUserService userService
@inject NavigationManager navigationManager

<h1>Change Password</h1>
<hr />

<div class="card col-3">
    <div class="card-body">
        <EditForm Model="@passwordChangeRequest" OnValidSubmit="(() => ChangePasswordAsync(passwordChangeRequest))">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="NewPassword">New Password</label>
                <InputText id="NewPassword" type="password" class="form-control" @bind-Value="passwordChangeRequest.NewPassword" />
                <ValidationMessage For="@(() => passwordChangeRequest.NewPassword)" />
            </div>
            <div class="form-group">
                <label for="ConfirmPassword">Confirm Password</label>
                <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="passwordChangeRequest.ConfirmPassword" />
                <ValidationMessage For="@(() => passwordChangeRequest.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-success">Save changes</button>
            <button type="button" class="btn btn-primary" @onclick="OnCancel">Back to Profile</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public UserDto User { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // Stores the User Authentication State data.
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    public PasswordChangeRequestDto passwordChangeRequest = new();

    protected override async Task OnInitializedAsync()
    {
        // Gets the current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to homepage.
            navigationManager.NavigateTo("/login", true);
        }
    }

    protected async Task ChangePasswordAsync(PasswordChangeRequestDto passwordChangeRequest)
    {
        int userId = User.Id;

        // Updates user password.
        await userService.ChangePasswordAsync(passwordChangeRequest, userId);
    }
}
