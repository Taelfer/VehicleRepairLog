@page "/login"

@inject IAuthenticationService authenticationService
@inject NavigationManager navigationManager

<h2>Login</h2>

@if (showAuthenticationError)
{
    <div class="alert alert-danger col-2" role="alert">
        <p>@authenticationErrorMessage</p>
    </div>
}

<div class="card col-2">
    <div class="card-body">
        <EditForm Model="loginRequest" OnValidSubmit="HandleAuthentication">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                <ValidationMessage For="@(() => loginRequest.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>
            <button type="submit" class="btn btn-success mt-2">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private bool showAuthenticationError;
    private string authenticationErrorMessage = "";

    public async Task HandleAuthentication()
    {
        showAuthenticationError = false;

        var authResult = await authenticationService.LoginAsync(loginRequest);

        if (authResult is not null)
        {
            navigationManager.NavigateTo("/"); 
        }
        else
        {
            authenticationErrorMessage = "Wrong username or password. Try again.";
            showAuthenticationError = true;
        }
    }
}