@page "/userProfile/{UserId}"

@attribute [Authorize]

@inject IUserService userService
@inject NavigationManager navigationManager

@if (User is null)
{
    <p>Loading...</p>
}
else
{
    <div class="user-profile-body">
        <header>
            <h1>User Profile</h1>
            <hr />
        </header>

        <section>
            <div class="user-profile-container">
                <div class="split">
                    <div class="user-photo-container">
                        <img src="/icon-192.png" />
                    </div>

                    <div class="user-details-container">
                        <div class="user-details">
                            <h2>Your Details</h2>
                            <hr />
                            <ul class="user-information-list">
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">Username :</span>
                                    <strong class="user-information-item-value user-information-section">@User.Username</strong>
                                </li>
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">First name :</span>
                                    <strong class="user-information-item-value user-information-section">@User.FirstName</strong>
                                </li>
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">Last name :</span>
                                    <strong class="user-information-item-value user-information-section">@User.LastName</strong>
                                </li>
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">Email :</span>
                                    <strong class="user-information-item-value user-information-section">@User.Email</strong>
                                </li>
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">Date of birth :</span>
                                    <strong class="user-information-item-value user-information-section">@User.DateOfBirth</strong>
                                </li>

                                <li class="user-information-list-item">
                                    <button class="btn btn-primary" type="button" value="User" @onclick="ShowUpdateUserDetailsForm"> Edit Details </button>
                                </li>

                            </ul>
                        </div>
                        <div class="change-password">
                            <h2>Change Password</h2>
                            <hr />

                            <div class="password-change-btn">
                                <button class="btn btn-primary" type="button" @onclick="ShowUserPasswordChangeForm">Change Password</button>
                            </div>

                        </div>
                    </div>

                </div>
            </div>
        </section>
    </div>

    <UpdateUserDetails 
        User="User"
        Show="ShowEditDetailsForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <ChangeUserPassword
        User="User"
        PasswordChangeRequest="PasswordChangeRequest"
        Show="ShowPasswordChangeForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />
}

@code {
    // Stores current User data.
    [Parameter] public UserDto User { get; set; }
    [Parameter] public PasswordChangeRequestDto PasswordChangeRequest { get; set; } = new PasswordChangeRequestDto();
    [Parameter] public bool ShowEditDetailsForm { get; set; }
    [Parameter] public bool ShowPasswordChangeForm { get; set; }

    // Stores User ID taken from URI.
    [Parameter] public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Gets User data asynchronously with ID from URI.
        User = await userService.GetUserByIdAsync(Convert.ToInt32(UserId));

        ShowEditDetailsForm = false;
        ShowPasswordChangeForm = false;
    }

    protected void ShowUpdateUserDetailsForm()
    {
        ShowEditDetailsForm = true;
    }

    protected void ShowUserPasswordChangeForm()
    {
        ShowPasswordChangeForm = true;
    }
}