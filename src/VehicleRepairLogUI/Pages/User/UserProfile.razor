@page "/userProfile/{Id}"

@inject HttpClient httpClient
@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

@if (user is null)
{
    <p>Loading...</p>
}
else
{
    <div class="user-profile-body">
        <header>
            <h1>User Profile</h1>
            <hr />
        </header>

        <section>
            <div class="user-profile-container">
                <div class="split">
                    <div class="user-photo-container">
                        <img src="/icon-192.png" />
                    </div>

                    <div class="user-details-container">
                        <div class="user-details">
                            <h2>Your Details</h2>
                            <ul class="user-information-list">
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">Username :</span>
                                    <strong class="user-information-item-value user-information-section">@user.Username</strong>
                                </li>
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">First name :</span>
                                    <strong class="user-information-item-value user-information-section">@user.FirstName</strong>
                                </li>
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">Last name :</span>
                                    <strong class="user-information-item-value user-information-section">@user.LastName</strong>
                                </li>
                                <li class="user-information-list-item">
                                    <span class="user-information-item-label user-information-section">Email :</span>
                                    <strong class="user-information-item-value user-information-section">@user.Email</strong>
                                </li>
                            </ul>
                        </div>
                        <div class="change-password card col-2">
                            <h2>Change Password</h2>
                            <div class="card-body">
                                <EditForm Model="user" OnValidSubmit="(() => UpdateUserAsync(user))">
                                    <DataAnnotationsValidator />
                                    <div class="form-group">
                                        <label for="Password" class="control-label">Password</label>
                                        <InputText id="Password" class="form-control" @bind-Value="user.Password" />
                                        <ValidationMessage For="@(() => user.Password)" />
                                    </div>
                                    <div class="form-group">
                                        <label for="ConfirmPassword" class="control-label">Confirm Password</label>
                                        <InputText id="ConfirmPassword" class="form-control" @bind-Value="user.Password" placeholder="Confirm Password"  />
                                        <ValidationMessage For="@(() => user.Password)" />
                                    </div>
                                    <button type="submit" class="btn btn-success">Save changes</button>
                                </EditForm>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </section>
    </div>  
}

@code {
    // Stores User data.
    protected User user;

    // Stores User ID taken from URI.
    [Parameter]
    public string Id { get; set; }

    // Stores the User Authentication State data.
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to homepage.
            navigationManager.NavigateTo("/", true);
        }

        // Otherwise.
        // Gets User data asynchronously with ID from URI.
        user = await userService.GetUserByIdAsync(Convert.ToInt32(Id));
    }

    protected async Task UpdateUserAsync(User user)
    {
        // Gets the current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to homepage.
            navigationManager.NavigateTo("/", true);
        }

        // Otherwise...
        // Updates User data with changes made.
        await userService.UpdateUserAsync(user);

        // Takes to User profile page.
        navigationManager.NavigateTo("/userProfile/{Id}", true);
    }
}