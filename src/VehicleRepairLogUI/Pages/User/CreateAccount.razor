@page "/register"

@inject IAuthenticationService authService
@inject NavigationManager navigationManager

<h1>Register</h1>
<hr />

@if (showRegistrationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@registrationErrorMessage</p>
    </div>
}

<div class="card col-2">
    <div class="card-body">
        <EditForm Model="registerRequest" OnValidSubmit="HandleRegistrationAsync">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="registerRequest.Username"/>
                <ValidationMessage For="@(() => registerRequest.Username)" />
            </div>
            <div class="form-group">
                <label for="email">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="registerRequest.Email"/>
                <ValidationMessage For="@(() => registerRequest.Email)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password" />
                <ValidationMessage For="@(() => registerRequest.Password)" />
            </div>
            <div class="form-group">
                <label for="password">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerRequest.ConfirmPassword" />
                <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary mt-2">Register</button>
        </EditForm>
    </div>
</div>

@code {
    protected RegisterRequestDto registerRequest = new();
    protected bool showRegistrationError;
    protected string registrationErrorMessage = "";

    public async Task HandleRegistrationAsync()
    {
        showRegistrationError = false;

        var result = await authService.RegisterAsync(registerRequest);

        if (result.Successful)
        {
            // Takes to the Login page.
            this.navigationManager.NavigateTo("/login");
        }
        else
        {
            registrationErrorMessage = "Something went wrong. Try again.";
            showRegistrationError = true;
        }
    }
}