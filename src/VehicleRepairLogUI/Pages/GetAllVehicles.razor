@page "/vehicles"

@inject HttpClient httpClient
@inject IVehicleService vehicleService 
@inject NavigationManager navigatorManager

<h3>Vehicles List</h3>

@if(vehicles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <NavLink class="nav-link" href="/addVehicle">
        <button type="button" class="btn btn-primary">Add Vehicle</button>
    </NavLink>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Brand Name</th>
                <th>VIN number</th>
                <th>Paint Color</th>
                <th>Fuel Type</th>
                <th>Mileage</th>
                <th>Repairs</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var vehicle in vehicles)
            {
                <tr>
                    <td>@vehicle.BrandName</td>
                    <td>@vehicle.VinNumber</td>
                    <td>@vehicle.PaintColor</td>
                    <td>@vehicle.FuelType</td>
                    <td>@vehicle.Mileage</td>
                    <td>
                        <ul>
                            @foreach (Repair repair in vehicle.Repairs)
                            {
                                <li>@repair.Name</li>
                            }
                        </ul>
                    </td>
                    <td>
                        <button class="btn btn-danger" type="button" value="vehicle.Id" 
                                            @onclick="@(() => DeleteVehicleAsync(vehicle))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected IEnumerable<Vehicle> vehicles;
    protected IEnumerable<Repair> repairs;

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
            vehicles = await vehicleService.GetAllVehiclesAsync();
        }
        else
        {
            navigatorManager.NavigateTo("/", true);
        }
    }

    protected async Task DeleteVehicleAsync(Vehicle vehicle)
    {
        AuthenticationState authState = await AuthState;

        if (authState.User.Identity.IsAuthenticated)
        {
            await vehicleService.DeleteVehicleAsync(vehicle.Id);
            navigatorManager.NavigateTo("/vehicles", true);
        }
        else
        {
            navigatorManager.NavigateTo("/", true);
        }
    }
}
