@page "/userProfile/{Id}"

@inject HttpClient httpClient
@inject IUserService userService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<h3>User Profile</h3>

@if (user is null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>Date of birth</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.Username</td>
                <td>@user.Email</td>
                <td>@user.DateOfBirth</td>
                @*<td>
                    <button class="btn btn-primary" type="button" value="vehicle"
                        @onclick="@(() => UpdateUserAsync(user.Id))">
                        Update
                    </button>
                </td>
                <td>
                    <button class="btn btn-danger" type="button" value="vehicle.Id"
                        @onclick="@(() => DeleteUserAsync(user.Id))">
                        Delete
                    </button>
                </td>*@
            </tr>
        </tbody>
    </table>
}

@code {
    // Stores User data.
    protected User user;

    // Stores User ID taken from URI.
    [Parameter]
    public string Id { get; set; }

    // Stores the User Authentication State data.
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get the current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to homepage.
            navigationManager.NavigateTo("/", true);
        }

        // Otherwise.
        // Gets User data asynchronously with ID from URI.
        user = await userService.GetUserByIdAsync(Convert.ToInt32(Id));
    }
}