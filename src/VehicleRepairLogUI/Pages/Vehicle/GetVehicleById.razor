@page "/vehicleProfile/{VehicleId}"

@attribute [Authorize]

@inject IVehicleService vehicleService
@inject NavigationManager navigationManager

@if (Vehicle is null)
{
    <p>Loading...</p>
}
else
{
    <VehicleProfile
        Vehicle="Vehicle"
        VehicleDetailsUpdate="ShowUpdateVehicleDetailsForm"
        VehicleDelete="DisplayDeleteConfirmationPopUpForm" />

    <UpdateVehicle 
        Show="ShowEditDetailsForm"
        Vehicle="Vehicle"
        OnConfirm="@(async () => await ConfirmVehicleDetailsUpdate())"
        OnCancel="@(async () => await CancelDetailsUpdate())"/>

    <DeleteConfirmationPopUpForm 
        Show="ShowDeleteConfirmationPopUpForm"
        OnCancel="@(async () => await CancelDetailsUpdate())"
        OnDelete="@(async () => await ConfirmDelete())"/>
}


@code {
    // Stores Vehicle data of given ID.
    [Parameter] public VehicleDto Vehicle { get; set; }
    [Parameter] public bool ShowEditDetailsForm { get; set; }
    [Parameter] public bool ShowDeleteConfirmationPopUpForm { get; set; }

    // Stores Vehicle ID taken from URI.
    [Parameter] public string VehicleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Gets Vehicle data asynchronously with ID from URI. 
        Vehicle = await vehicleService.GetVehicleByIdAsync(Convert.ToInt32(VehicleId));
    }

    protected async Task ConfirmDelete()
    {
        await vehicleService.DeleteVehicleAsync(Vehicle.Id);
        navigationManager.NavigateTo("/vehicles", true);

        ShowDeleteConfirmationPopUpForm = false;
    }

    protected async Task ConfirmVehicleDetailsUpdate()
    {
        await vehicleService.UpdateVehicleAsync(Vehicle);

        ShowEditDetailsForm = false;
    }

    public void DisplayDeleteConfirmationPopUpForm()
    {
        ShowDeleteConfirmationPopUpForm = true;
    }

    //public void CancelDeleteConfirmationPopUpform()
    //{
    //    ShowDeleteConfirmationPopUpForm = false;
    //}

    public void ShowUpdateVehicleDetailsForm()
    {
        ShowEditDetailsForm = true;
    }

    protected async Task CancelDetailsUpdate()
    {
        await OnInitializedAsync();

        ShowEditDetailsForm = false;
        ShowDeleteConfirmationPopUpForm = false;
    }
}
