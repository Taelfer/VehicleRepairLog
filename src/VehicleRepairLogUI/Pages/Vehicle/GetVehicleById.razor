@page "/vehicleProfile/{Id}"

@inject IVehicleService vehicleService
@inject NavigationManager navigationManager

<h1>Vehicle Profile</h1>
<hr />

@if (vehicle == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Vehicle Name</th>
                <th>Paint Color</th>
                <th>Fuel Type</th>
                <th>Mileage</th>
                <th>Repairs</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@vehicle.BrandName</td>
                <td>@vehicle.PaintColor</td>
                <td>@vehicle.FuelType</td>
                <td>@vehicle.Mileage</td>
                <td>
                    <table width="100%">
                        <tr>
                            <th>Name</th>
                            <th>Date</th>
                        </tr>
                        @foreach (RepairDto repair in vehicle.Repairs.OrderByDescending(repair => repair.Date))
                        {
                            <tr>
                                <td>
                                    @repair.Name
                                </td>
                                <td>
                                    @repair.Date
                                </td>
                            </tr>
                        }
                    </table>
                </td>
                <td>
                    <button class="btn btn-primary" type="button" value="vehicle"
                                     @onclick="@(() => UpdateVehicleAsync(vehicle.Id))">Update</button>
                </td>
                <td>
                    <button class="btn btn-danger" type="button" value="vehicle.Id" 
                                     @onclick="@(() => DeleteVehicleAsync(vehicle.Id))">Delete</button>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    // Stores Vehicle data.
    protected VehicleDto vehicle;

    // Stores Vehicle ID taken from URI.
    [Parameter]
    public string Id { get; set; }     

    // Stores the user Authentication State data.
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Gets current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to homepage.
            navigationManager.NavigateTo("/", true);
        }

        // Otherwise.
        // Gets Vehicle data asynchronously with ID from URI. 
        vehicle = await vehicleService.GetVehicleByIdAsync(Convert.ToInt32(Id));
    }

    /// <summary>
    ///     Takes to page where vehicle of given ID can be updated.
    /// </summary>
    /// <param name="id">ID of chosen Vehicle.</param>
    /// <returns>A <see cref="Task"/> representing an asynchronous operation.</returns>
    protected async Task UpdateVehicleAsync(int id)
    {
        // Gets current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to the Login page.
            navigationManager.NavigateTo("/login", true);
        }

        // Otherwise...
        // Takes to Vehicle update page.
        navigationManager.NavigateTo($"/updateVehicle/{id}", true);
    }

    /// <summary>
    ///     Deletes Vehicle of given ID.
    /// </summary>
    /// <param name="id">ID of chosen Vehicle.</param>
    /// <returns>A <see cref="Task"/> representing an asynchronous operation.</returns>
    protected async Task DeleteVehicleAsync(int id)
    {
        // Gets current user State.
        AuthenticationState authState = await AuthState;

        // If the current user state is not authenticated...
        if (authState.User.Identity.IsAuthenticated == false)
        {
            // Takes to the Login page.
            navigationManager.NavigateTo("/login", true);
        }

        // Otherwise...
        // Deletes vehicle.
        await vehicleService.DeleteVehicleAsync(id);

        // Takes to page with Vehicles after deleting Vehicle of chosen ID.
        navigationManager.NavigateTo("/vehicles", true);
    }
}
