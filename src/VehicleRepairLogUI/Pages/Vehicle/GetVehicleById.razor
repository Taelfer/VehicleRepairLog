@page "/vehicle/{VehicleId}"

@attribute [Authorize]

@inject IVehicleService vehicleService
@inject IRepairService repairService
@inject NavigationManager navigationManager

@if (Vehicle is null)
{
    <p>Loading...</p>
}
else
{
    <h1>Vehicle - @Vehicle.Name</h1>
    <hr />

    <button class="btn btn-primary" type="button" @onclick="AddRepairForm"> Add Repair </button>
    <button class="btn btn-primary" type="button" @onclick="ShowUpdateVehicleDetailsForm">Update</button>
    <button class="btn btn-danger" type="button" @onclick="DisplayVehicleDeleteConfirmationPopUpForm">Delete</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Vin Number</th>
                <th>Vehicle Name</th>
                <th>Brand Name</th>
                <th>Paint Color</th>
                <th>Fuel Type</th>
                <th>Mileage</th>
                <th>Repairs</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Vehicle.VinNumber</td>
                <td>@Vehicle.Name</td>
                <td>@Vehicle.BrandName</td>
                <td>@Vehicle.PaintColor</td>
                <td>@Vehicle.FuelType</td>
                <td>@Vehicle.Mileage</td>
                <td>
                    <table width="100%">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Parts</th>
                                <th>Date</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (RepairDto repair in Vehicle.Repairs.OrderByDescending(repair => repair.CreatedDate))
                            {
                                <tr>
                                    <td>
                                        <a class="nav-link" href="repair/@repair.Id"> @repair.Name </a>
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" type="button"
                                                        @onclick="@(async () => await PartsListForm(repair.Id))"> List of Parts </button>
                                    </td>
                                    <td>
                                        @repair.CreatedDate
                                    </td>
                                    <td>
                                        <button class="btn btn-primary" type="button"
                                        @onclick="@(async () => await ShowUpdateRepairDetailsForm(repair.Id))">
                                            Update
                                        </button>
                                        <button class="btn btn-danger" type="button"
                                        @onclick="@(() => DisplayRepairDeleteConfirmationPopUpForm(repair.Id))">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
        </tbody>
    </table>

    <UpdateVehicle 
        Vehicle="Vehicle"
        Show="ShowVehicleEditDetailsForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <AddRepair 
        Repair="Repair"
        Vehicle="Vehicle"
        Show="ShowAddRepairForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnConfirmNextRepair="@(async () => await AddNextRepairFormAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <UpdateRepair
        Repair="Repair"
        Show="ShowRepairEditDetailsForm" 
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <PartsList
        Part="Part"
        Repair="Repair"
        Show="ShowPartsListForm"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <DeleteConfirmationForm
        Show="ShowDeleteConfirmationForm"
        DeleteVehicleConfirmation="DeleteVehicleConfirmation"
        DeleteRepairConfirmation="DeleteRepairConfirmation"
        DeleteVehicle="@(async () => await ConfirmVehicleDeleteAsync())"
        DeleteRepair="@(async () => await ConfirmRepairDeleteAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />
}


@code {
    [Parameter] public PartDto Part { get; set; } = new PartDto();

    // Stores Vehicle ID taken from URI.
    [Parameter] public string VehicleId { get; set; }
    [Parameter] public VehicleDto Vehicle { get; set; }
    [Parameter] public RepairDto Repair { get; set; } = new RepairDto();

    // Flags indicating if forms should be displayed.
    [Parameter] public bool ShowVehicleEditDetailsForm { get; set; }
    [Parameter] public bool ShowAddRepairForm { get; set; }
    [Parameter] public bool ShowRepairEditDetailsForm { get; set; }
    [Parameter] public bool ShowDeleteConfirmationForm { get; set; }
    [Parameter] public bool ShowPartsListForm { get; set; }

    // Flags indicating if actions are confirmed.
    [Parameter] public bool DeleteRepairConfirmation { get; set; }
    [Parameter] public bool DeleteVehicleConfirmation { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        // Gets Vehicle data asynchronously with ID from URI. 
        Vehicle = await vehicleService.GetVehicleByIdAsync(Convert.ToInt32(VehicleId));

        ShowAddRepairForm = false;
        ShowVehicleEditDetailsForm = false;
        ShowRepairEditDetailsForm = false;
        ShowDeleteConfirmationForm = false;
        ShowPartsListForm = false;
        DeleteVehicleConfirmation = false;
        DeleteRepairConfirmation = false;
    }

    public void ShowUpdateVehicleDetailsForm()
    {
        ShowVehicleEditDetailsForm = true;
    }

    protected void AddRepairForm()
    {
        ShowAddRepairForm = true;
    }

    protected async Task AddNextRepairFormAsync()
    {
        // New Repair object in order to empty form fields.
        Repair = new RepairDto();

        // API call to refresh Vehicle Details.
        Vehicle = await vehicleService.GetVehicleByIdAsync(Convert.ToInt32(VehicleId));

        ShowAddRepairForm = true;
    }

    protected async Task PartsListForm(int repairId)
    {
        Repair = await repairService.GetRepairByIdAsync(repairId);

        ShowPartsListForm = true;
    }

    public async Task ShowUpdateRepairDetailsForm(int repairId)
    {
        // API call to fill in the form fields with Repair of given ID data.
        Repair = await repairService.GetRepairByIdAsync(repairId);

        ShowRepairEditDetailsForm = true;
    }

    public void DisplayVehicleDeleteConfirmationPopUpForm()
    {
        ShowDeleteConfirmationForm = true;
        DeleteVehicleConfirmation = true;
    }

    public void DisplayRepairDeleteConfirmationPopUpForm(int repairId)
    {
        Repair.Id = repairId;

        ShowDeleteConfirmationForm = true;
        DeleteRepairConfirmation = true;
    } 

    protected async Task ConfirmVehicleDeleteAsync()
    {
        // API call to delete Vehicle with given ID.
        await vehicleService.DeleteVehicleAsync(Vehicle.Id);

        // Redirecting to Vehicles list page after Vehicle deletion.
        navigationManager.NavigateTo("/vehicles", true);
    }

    protected async Task ConfirmRepairDeleteAsync()
    {
        // API call to delete Repair with given ID.
        await repairService.DeleteRepairAsync(Repair.Id);

        // OnIntitialized call in order to close Delete Confirmation Form and refresh Vehicle Data.
        await OnInitializedAsync();
    }
}
