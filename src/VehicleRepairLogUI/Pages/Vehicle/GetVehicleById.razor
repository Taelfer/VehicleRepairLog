@page "/vehicleProfile/{VehicleId}"

@attribute [Authorize]

@inject IVehicleService vehicleService
@inject NavigationManager navigationManager

@if (Vehicle is null)
{
    <p>Loading...</p>
}
else
{
    <h1>Vehicle Profile</h1>
    <hr />

    <button class="btn btn-primary" type="button" @onclick="AddRepairForm"> Add Repair </button>
    <button class="btn btn-primary" type="button" @onclick="ShowUpdateVehicleDetailsForm">Update</button>
    <button class="btn btn-danger" type="button" @onclick="DisplayDeleteConfirmationPopUpForm">Delete</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Vehicle Name</th>
                <th>Paint Color</th>
                <th>Fuel Type</th>
                <th>Mileage</th>
                <th>Repairs</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Vehicle.BrandName</td>
                <td>@Vehicle.PaintColor</td>
                <td>@Vehicle.FuelType</td>
                <td>@Vehicle.Mileage</td>
                <td>
                    <table width="100%">
                        <tr>
                            <th>Name</th>
                            <th>Date</th>
                        </tr>
                        @foreach (RepairDto repair in Vehicle.Repairs.OrderByDescending(repair => repair.Date))
                        {
                            <tr>
                                <td>
                                    @repair.Name
                                </td>
                                <td>
                                    @repair.Date
                                </td>
                            </tr>
                        }
                    </table>
                </td>
                <td></td>
            </tr>
        </tbody>
    </table>

    <UpdateVehicle 
        Vehicle="Vehicle"
        Show="ShowEditDetailsForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <AddRepair 
        Vehicle="Vehicle"
        Show="ShowAddRepairForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <DeleteConfirmationPopUpForm 
        Show="ShowDeleteConfirmationPopUpForm"
        OnDelete="@(async () => await ConfirmDelete())"
        OnCancel="@(async () => await OnInitializedAsync())" />
}


@code {
    // Stores Vehicle data of given ID.
    [Parameter] public VehicleDto Vehicle { get; set; }
    [Parameter] public bool ShowEditDetailsForm { get; set; }
    [Parameter] public bool ShowAddRepairForm { get; set; }
    [Parameter] public bool ShowDeleteConfirmationPopUpForm { get; set; }

    // Stores Vehicle ID taken from URI.
    [Parameter] public string VehicleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Gets Vehicle data asynchronously with ID from URI. 
        Vehicle = await vehicleService.GetVehicleByIdAsync(Convert.ToInt32(VehicleId));

        ShowAddRepairForm = false;
        ShowEditDetailsForm = false;
        ShowDeleteConfirmationPopUpForm = false;
    }

    protected async Task ConfirmDelete()
    {
        await vehicleService.DeleteVehicleAsync(Vehicle.Id);
        navigationManager.NavigateTo("/vehicles", true);

        ShowDeleteConfirmationPopUpForm = false;
    }

    protected void AddRepairForm()
    {
        ShowAddRepairForm = true;
    }

    public void DisplayDeleteConfirmationPopUpForm()
    {
        ShowDeleteConfirmationPopUpForm = true;
    }

    public void ShowUpdateVehicleDetailsForm()
    {
        ShowEditDetailsForm = true;
    }
}
