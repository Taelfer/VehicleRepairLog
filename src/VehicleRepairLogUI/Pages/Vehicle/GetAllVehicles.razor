@page "/vehicles"

@attribute [Authorize]

@inject IVehicleService vehicleService

<h1>Vehicles List</h1>
<hr />

@if(vehicles is null)
{
    <p>Loading...</p>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="@(async () => await AddVehicleFormAsync())"> Add Vehicle </button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Vin Number</th>
                <th>Vehicle Name</th>
                <th>Brand Name</th>
                <th>Image</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var vehicle in vehicles)
            {
                <tr>
                    <td>@vehicle.VinNumber</td>
                    <td>
                        <a class="nav-link" href="vehicle/@vehicle.Id"> @vehicle.Name </a>
                    </td>
                    <td>@vehicle.BrandName</td>
                    <td><img src="/car-default-image.png" /></td>
                </tr>
            }
        </tbody>
    </table>

    <AddVehicle
        Vehicle="Vehicle"
        Show="ShowAddVehicleForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnConfirmNextVehicle="@(async () => await AddNextVehicleFormAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <AddRepair
        Vehicle="Vehicle"
        Show="ShowAddRepairForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />
}

@code {
    protected IEnumerable<VehicleDto> vehicles;
    [Parameter] public VehicleDto Vehicle { get; set; } = new VehicleDto();
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; }

    // Flags indicating if forms should be displayed.
    [Parameter] public bool ShowAddRepairForm { get; set; }
    [Parameter] public bool ShowAddVehicleForm { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        vehicles = await vehicleService.GetAllVehiclesAsync();

        ShowAddVehicleForm = false;
        ShowAddRepairForm = false;
    }

    protected async Task AddVehicleFormAsync()
    {
        // New Vehicle object in order to empty form fields.
        Vehicle = new VehicleDto();

        AuthenticationState authState = await AuthState;

        // Stores User ID taken from AuthenticationState.
        int userId = Convert.ToInt32(authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value);

        // Assigns User ID to Vehicle to connect them correctly.
        Vehicle.UserId = userId;

        ShowAddVehicleForm = true;
    }

    protected async Task AddNextVehicleFormAsync()
    {
        // API call to refresh Vehicles list.
        vehicles = await vehicleService.GetAllVehiclesAsync();

        await AddVehicleFormAsync();
    }

    public void AddRepairForm(int vehicleId)
    {
        Vehicle.Id = vehicleId;

        ShowAddRepairForm = true;
    }
}
