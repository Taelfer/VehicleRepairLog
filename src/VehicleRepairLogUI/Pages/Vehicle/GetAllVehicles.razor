@page "/vehicles"

@attribute [Authorize]

@inject IVehicleService vehicleService 
@inject NavigationManager navigationManager

<h1>Vehicles List</h1>
<hr />

@if(vehicles is null)
{
    <p>Loading...</p>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="@(async () => await AddVehicleFormAsync())"> Add Vehicle </button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Vehicle Name</th>
                <th>Image</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var vehicle in vehicles)
            {
                <tr>
                    <td>
                        <a class="nav-link" href="vehicleProfile/@vehicle.Id"> @vehicle.BrandName </a>
                    </td>
                    <td></td>
                    <td>
                        <button class="btn btn-primary" type="button"
                                            @onclick="@(() => AddRepairFormAsync(vehicle.Id))"> Add Repair </button>
                        <button class="btn btn-danger" type="button" 
                                            @onclick="@(() => DisplayDeleteConfirmationPopUpForm(vehicle.Id))"> Delete </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <AddVehicle
        Vehicle="Vehicle"
        Show="ShowAddVehicleForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <AddRepair
        Vehicle="Vehicle"
        Show="ShowAddRepairForm"
        OnConfirm="@(async () => await OnInitializedAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />

    <DeleteConfirmationPopUpForm 
        Show="ShowDeleteConfirmationPopUpForm"
        OnDelete="@(async () => await ConfirmVehicleDeleteAsync())"
        OnCancel="@(async () => await OnInitializedAsync())" />
}

@code {
    protected IEnumerable<VehicleDto> vehicles;
    [Parameter] public VehicleDto Vehicle { get; set; } = new VehicleDto();
    [Parameter] public bool ShowAddRepairForm { get; set; }
    [Parameter] public bool ShowAddVehicleForm { get; set; }
    [Parameter] public bool ShowDeleteConfirmationPopUpForm { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        vehicles = await vehicleService.GetAllVehiclesAsync();

        ShowAddVehicleForm = false;
        ShowAddRepairForm = false;
        ShowDeleteConfirmationPopUpForm = false;
    }

    protected async Task AddVehicleFormAsync()
    {
        AuthenticationState authState = await AuthState;

        // Stores User ID taken from AuthenticationState.
        int userId = Convert.ToInt32(authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value);

        // Assigns User ID to Vehicle.
        Vehicle.UserId = userId;

        ShowAddVehicleForm = true;
    }

    public void AddRepairFormAsync(int vehicleId)
    {
        Vehicle.Id = vehicleId;

        ShowAddRepairForm = true;
    }

    public void DisplayDeleteConfirmationPopUpForm(int vehicleId)
    {
        Vehicle.Id = vehicleId;
        ShowDeleteConfirmationPopUpForm = true;
    }

    protected async Task ConfirmVehicleDeleteAsync()
    {
        await vehicleService.DeleteVehicleAsync(Vehicle.Id);

        await OnInitializedAsync();
    }
}
